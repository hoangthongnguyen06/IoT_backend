# exploit.py
from flask import Blueprint, jsonify, request, flash, redirect, url_for, session, current_app
from flask_jwt_extended import JWTManager, create_access_token, jwt_required, get_jwt_identity
from flask import Blueprint, jsonify, request
from app.models.exploit import Exploit
from app.models import db
import os
from flask import send_from_directory
from werkzeug.utils import secure_filename
exploit_bp = Blueprint('exploit', __name__)

ALLOWED_EXTENSIONS_EXPLOIT = {'py'}  # Các định dạng file cho phép
ALLOWED_EXTENSIONS_DESCRIPTION = {'doc','docx'}

def allowed_file_description(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS_DESCRIPTION
def allowed_file_exploit(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS_EXPLOIT

@exploit_bp.route('/exploits', methods=['GET'])
@jwt_required()
def get_exploits():
    current_user = get_jwt_identity()
    exploits = Exploit.query.all()
    exploits_data = [{'id': exploit.id, 'cve_id': exploit.cve_id, 'exploit_path': exploit.exploit_path, 'description_path': exploit.description_path, 'usage_guide' : exploit.usage_guide, 'category': exploit.topic, 'status': exploit.status} for exploit in exploits]
    return jsonify({'exploits': exploits_data})

@exploit_bp.route('/exploits/get_exploit', methods=['POST'])
@jwt_required()
def get_exploit_by_id():
    current_user = get_jwt_identity()
    data = request.get_json()

    exploit_id = data.get('exploit_id')
    if exploit_id is None:
        return jsonify({'message': 'Exploit ID is required'}), 400

    exploit = Exploit.query.get(exploit_id)

    if exploit:
        exploit_data = {
            'id': exploit.id,
            'cve_id': exploit.cve_id,
            'exploit_path': exploit.exploit_path,
            'description': exploit.description,
            'usage_guide': exploit.usage_guide,
            'category': exploit.topic,
            'status': exploit.status
            # Thêm các trường khác nếu cần
        }
        return jsonify({'exploit': exploit_data})
    else:
        return jsonify({'message': 'Exploit not found'}), 404

@exploit_bp.route('/exploits/get_exploits_by_cve', methods=['POST'])
@jwt_required()
def get_exploits_by_cve():
    current_user = get_jwt_identity()
    data = request.get_json()

    cve_id = data.get('cve_id')
    if not cve_id:
        return jsonify({'message': 'CVE ID must be provided'}), 400

    exploits = Exploit.query.filter_by(cve_id=cve_id).all()

    if exploits:
        exploits_data = []
        for exploit in exploits:
            exploit_data = {
                'id': exploit.id,
                'cve_id': exploit.cve_id,
                'exploit_path': exploit.exploit_path,
                'description': exploit.description,
                'usage_guide': exploit.usage_guide,
                'category': exploit.topic,
                'status': exploit.status
                # Thêm các trường khác nếu cần
            }
            exploits_data.append(exploit_data)

        return jsonify({'exploits': exploits_data})
    else:
        return jsonify({'message': 'No exploits found for the given CVE ID'}), 404

@exploit_bp.route('/exploits', methods=['POST'])
@jwt_required()
def create_exploit():
    current_user = get_jwt_identity()
    if current_user['role'] == 'admin':
        data = request.form
        cve_id = data['cve_id']
        description_file = request.files['description_file']
        exploit_file = request.files['exploit_file']
        usage_guide = data['usage_guide']
        topic = data['topic']  # Add topic field
        status = data['status']
        # Kiểm tra xem file exploit có được tải lên hay không
        if exploit_file and description_file and allowed_file_exploit(exploit_file.filename):
            # Tạo một tên an toàn cho file
            exploit_filename = secure_filename(exploit_file.filename)
            description_filename = secure_filename(description_file.filename)
            # Thư mục lưu trữ file (tương đối)
            upload_folder_exploit = os.path.join(current_app.root_path, 'exploits')
            upload_folder_description = os.path.join(current_app.root_path, 'descriptions')
            # Tạo thư mục nếu nó không tồn tại
            if not os.path.exists(upload_folder_exploit) and not os.path.exists(upload_folder_description):
                os.makedirs(upload_folder_exploit)
                os.makedirs(upload_folder_description)
            full_path_exploit = os.path.join(upload_folder_exploit, exploit_filename)
            full_path_description = os.path.join(upload_folder_description, description_filename)
            if os.path.exists(full_path_exploit) and os.path.exists(full_path_description):
                return jsonify({'message': 'File already exists'}), 409  # HTTP 409 Conflict
            else:
                # Lưu file exploit vào thư mục được cấu hình
                exploit_path = os.path.join('exploits', exploit_filename)
                description_path = os.path.join('descriptions', description_filename)
                exploit_file.save(os.path.join(upload_folder_exploit, exploit_filename))
                description_file.save(os.path.join(upload_folder_description, description_filename))
                # Lưu đường dẫn tương đối của file vào cơ sở dữ liệu
                new_exploit = Exploit(cve_id=cve_id, exploit_path=exploit_path, descriptio_path=description_path, usage_guide=usage_guide, topic=topic, status=status)
                db.session.add(new_exploit)
                db.session.commit()
                return jsonify({'message': 'Exploit created successfully'})
        else:
            return jsonify({'message': 'Invalid file format'}), 400
    else:
        return jsonify({'message': 'Unauthorized'}), 403
    
@exploit_bp.route('/exploits/<int:exploit_id>', methods=['PUT'])
@jwt_required()
def update_exploit(exploit_id):
    exploit = Exploit.query.get(exploit_id)
    current_user = get_jwt_identity()
    if current_user['role'] == 'admin':
        if exploit:
            data = request.get_json()
            exploit.cve_id = data['cve_id']
            exploit.description = data['description']
            exploit.usage_guide = data['usage_guide']
            exploit.topic = data['topic']  # Add topic field
            exploit.status = data['status']
            db.session.commit()
            return jsonify({'message': 'Exploit updated successfully'})
        else:
            return jsonify({'message': 'Exploit not found'}), 404
    else:
        return jsonify({'message': 'Unauthorized'}), 403
    
@exploit_bp.route('/exploits/<int:exploit_id>', methods=['DELETE'])
@jwt_required()
def delete_exploit(exploit_id):
    exploit = Exploit.query.get(exploit_id)
    current_user = get_jwt_identity()
    if current_user['role'] == 'admin':
        if exploit:
            # Lấy đường dẫn file từ exploit trong cơ sở dữ liệu
            exploit_path = exploit.exploit_path
            description_path = exploit.descriptio_path

            # Tách thành thư mục và tên file bằng cách sử dụng split với chuỗi '//'
            directory_exploit, exploit_filename = exploit_path.split('\\')
            directory_description, description_filename = description_path.split('\\')
            # Xóa exploit trong cơ sở dữ liệu
            db.session.delete(exploit)
            db.session.commit()

            # Xóa file từ hệ thống tệp
            exploit_file_path = os.path.join(current_app.root_path, directory_exploit, exploit_filename)
            description_file_path = os.path.join(current_app.root_path, directory_description, description_filename)
            if os.path.exists(exploit_file_path) and os.path.exists(description_file_path):
                os.remove(exploit_file_path)
                os.remove(description_file_path)

            return jsonify({'message': 'Exploit deleted successfully'})
        else:
            return jsonify({'message': 'Exploit not found'}), 404
    else:
        return jsonify({'message': 'Unauthorized'}), 403
    
    
@exploit_bp.route('/download-exploits', methods=['POST'])
@jwt_required()
def download_exploit():
    current_user = get_jwt_identity()
    data = request.get_json()
    exploit_id = data['exploit_id']
    exploit = Exploit.query.get(exploit_id)
    if exploit:
        # Lấy đường dẫn file từ exploit trong cơ sở dữ liệu
        exploit_path = exploit.exploit_path
        dir, filename = exploit_path.split('\\')
        directory = os.path.join(current_app.root_path, 'exploits')
        # Trả về file cho admin tải xuống
        return send_from_directory(directory, filename, as_attachment=True)
    else:
        return jsonify({'message': 'Exploit not found'}), 404

@jwt_required()
def download_description():
    current_user = get_jwt_identity()
    data = request.get_json()
    exploit_id = data['exploit_id']
    exploit = Exploit.query.get(exploit_id)
    if exploit:
        # Lấy đường dẫn file từ exploit trong cơ sở dữ liệu
        description_path = exploit.description_path
        dir, filename = description_path.split('\\')
        directory = os.path.join(current_app.root_path, 'descriptions')
        # Trả về file cho admin tải xuống
        return send_from_directory(directory, filename, as_attachment=True)
    else:
        return jsonify({'message': 'Exploit not found'}), 404