# exploit.py
from flask import Blueprint, jsonify, request, flash, redirect, url_for, session, current_app
from flask_jwt_extended import JWTManager, create_access_token, jwt_required, get_jwt_identity
from flask import Blueprint, jsonify, request
from app.models.exploit import Exploit
from app.models import db
import os
from werkzeug.utils import secure_filename
exploit_bp = Blueprint('exploit', __name__)

ALLOWED_EXTENSIONS = {'py'}  # Các định dạng file cho phép

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


@exploit_bp.route('/exploits', methods=['GET'])
@jwt_required()
def get_exploits():
    current_user = get_jwt_identity()
    if current_user['role'] == 'admin':
        exploits = Exploit.query.all()
        exploits_data = [{'id': exploit.id, 'cve_id': exploit.cve_id, 'exploit_path': exploit.exploit_path, 'description': exploit.description} for exploit in exploits]
        return jsonify({'exploits': exploits_data})

@exploit_bp.route('/exploits', methods=['POST'])
@jwt_required()
def create_exploit():
    current_user = get_jwt_identity()
    if current_user['role'] == 'admin':
        data = request.form
        cve_id = data['cve_id']
        description = data['description']
        exploit_file = request.files['file']

        # Kiểm tra xem file exploit có được tải lên hay không
        if exploit_file and allowed_file(exploit_file.filename):
            # Tạo một tên an toàn cho file
            filename = secure_filename(exploit_file.filename)

            # Thư mục lưu trữ file (tương đối)
            upload_folder = os.path.join(current_app.root_path, 'exploits')

            # Tạo thư mục nếu nó không tồn tại
            if not os.path.exists(upload_folder):
                os.makedirs(upload_folder)

            # Lưu file exploit vào thư mục được cấu hình
            exploit_path = os.path.join('exploits', filename)
            exploit_file.save(os.path.join(upload_folder, filename))

            # Lưu đường dẫn tương đối của file vào cơ sở dữ liệu
            new_exploit = Exploit(cve_id=cve_id, exploit_path=exploit_path, description=description)
            db.session.add(new_exploit)
            db.session.commit()

            return jsonify({'message': 'Exploit created successfully'})
        else:
            return jsonify({'message': 'Invalid file format'}), 400
    else:
        return jsonify({'message': 'Unauthorized'}), 403
    
@exploit_bp.route('/exploits/<int:exploit_id>', methods=['PUT'])
@jwt_required()
def update_exploit(exploit_id):
    exploit = Exploit.query.get(exploit_id)
    current_user = get_jwt_identity()
    if current_user['role'] == 'admin':
        if exploit:
            data = request.get_json()
            exploit.cve_id = data['cve_id']
            exploit.exploit_path = data['exploit_path']
            exploit.description = data['description']
            db.session.commit()
            return jsonify({'message': 'Exploit updated successfully'})
        else:
            return jsonify({'message': 'Exploit not found'}), 404
    else:
        return jsonify({'message': 'Unauthorized'}), 403
    
@exploit_bp.route('/exploits/<int:exploit_id>', methods=['DELETE'])
@jwt_required()
def delete_exploit(exploit_id):
    exploit = Exploit.query.get(exploit_id)
    current_user = get_jwt_identity()
    if current_user['role'] == 'admin':
        if exploit:
            # Lấy đường dẫn file từ exploit trong cơ sở dữ liệu
            exploit_path = exploit.exploit_path

            # Tách thành thư mục và tên file bằng cách sử dụng split với chuỗi '//'
            directory, filename = exploit_path.split('\\')

            # Xóa exploit trong cơ sở dữ liệu
            db.session.delete(exploit)
            db.session.commit()

            # Xóa file từ hệ thống tệp
            file_path = os.path.join(current_app.root_path, directory, filename)
            if os.path.exists(file_path):
                os.remove(file_path)

            return jsonify({'message': 'Exploit deleted successfully'})
        else:
            return jsonify({'message': 'Exploit not found'}), 404
    else:

        return jsonify({'message': 'Unauthorized'}), 403