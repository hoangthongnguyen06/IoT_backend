# exploit.py
from flask import Blueprint, jsonify, request, flash, redirect, url_for, session, current_app
from flask_jwt_extended import JWTManager, create_access_token, jwt_required, get_jwt_identity
from flask import Blueprint, jsonify, request
from app.models.exploit import Exploit
from app.models import db


exploit_bp = Blueprint('exploit', __name__)



@exploit_bp.route('/exploits', methods=['GET'])
@jwt_required()
def get_exploits():
    current_user = get_jwt_identity()
    if current_user['role'] == 'admin':
        exploits = Exploit.query.all()
        exploits_data = [{'id': exploit.id, 'cve_id': exploit.cve_id, 'exploit_path': exploit.exploit_path, 'description': exploit.description} for exploit in exploits]
        return jsonify({'exploits': exploits_data})

@exploit_bp.route('/exploits', methods=['POST'])
@jwt_required()
def create_exploit():
    current_user = get_jwt_identity()
    if current_user['role'] == 'admin':
        data = request.get_json()
        new_exploit = Exploit(cve_id=data['cve_id'], description=data['description'], exploit_path=data['exploit_path'])
        db.session.add(new_exploit)
        db.session.commit()
        return jsonify({'message': 'Exploit created successfully'})
    else:
        return jsonify({'message': 'Unauthorized'}), 403
    
@exploit_bp.route('/exploits/<int:exploit_id>', methods=['PUT'])
def update_exploit(exploit_id):
    exploit = Exploit.query.get(exploit_id)
    current_user = get_jwt_identity()
    if current_user['role'] == 'admin':
        if exploit:
            data = request.get_json()
            exploit.cve_id = data['cve_id']
            exploit.exploit_path = data['exploit_path']
            exploit.description = data['description']
            db.session.commit()
            return jsonify({'message': 'Exploit updated successfully'})
        else:
            return jsonify({'message': 'Exploit not found'}), 404
    else:
        return jsonify({'message': 'Unauthorized'}), 403
@exploit_bp.route('/exploits/<int:exploit_id>', methods=['DELETE'])
def delete_exploit(exploit_id):
    exploit = Exploit.query.get(exploit_id)
    current_user = get_jwt_identity()
    if current_user['role'] == 'admin':
        if exploit:
            db.session.delete(exploit)
            db.session.commit()
            return jsonify({'message': 'Exploit deleted successfully'})
        else:
            return jsonify({'message': 'Exploit not found'}), 404
    else:
        return jsonify({'message': 'Unauthorized'}), 403